{"version":3,"file":"static/js/259.cb9d3965.chunk.js","mappings":"wQACA,EAAsB,2BCkBXA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,SCXL,SAASG,IAAiB,IAAD,IAEtC,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEOX,GAAMY,EAAAA,EAAAA,MAANZ,GAIDa,EAAQ,qBAFGC,EAAAA,EAAAA,MAESR,aAAZ,aAAG,EAAgBS,YAAnB,QAA2B,KAEvCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,2FACfR,GAAW,GADI,SAGbE,EAAS,MAHI,UAIMO,EAAAA,EAAAA,IAAalB,GAJnB,OAIPmB,EAJO,OAKbZ,EAASY,GALI,gDAOXR,EAAS,EAAD,IAPG,yBASXF,GAAW,GATA,4EAAH,qDAYdQ,GACH,GAAE,CAACjB,IAEN,IAAQoB,EAAqEd,EAArEc,MAAOC,EAA8Df,EAA9De,cAAeC,EAA+ChB,EAA/CgB,SAAUC,EAAqCjB,EAArCiB,aAAcC,EAAuBlB,EAAvBkB,OAAQC,EAAenB,EAAfmB,WAExDC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OAC3B,4BAAsBA,EAAtB,MAAWlC,IADgB,IAKzBmC,EADQ,sDACIR,EAEVS,EAASpC,IACTqC,EAAYrC,IAElB,OACE,gCACGc,IAAW,SAACwB,EAAA,EAAD,IACXtB,IAAS,iDACV,0BACE,SAAC,KAAD,CAAMuB,GAAIpB,EAAV,uBAGDP,IACC,4BACE,iBAAK4B,UAAWC,EAAhB,WACE,0BACE,gBAAKC,IAAKP,EAAKQ,IAAI,GAAGC,MAAO,SAE/B,4BACE,0BAAKlB,EAAL,KAAY,uCAAQG,QAAR,IAAQA,OAAR,EAAQA,EAAcgB,MAAM,EAAG,GAA/B,WACZ,yCAAiBC,KAAKC,MAAMhB,GAA5B,QACA,sCACA,uBAAIH,KACJ,oCACA,uBAAII,WAGR,oDACE,yBAAkB,SAAC,KAAD,CAAMO,GAAG,OAAO3B,MAAO,CAACS,KAAMF,GAA9B,mBAATiB,IACT,yBAAqB,SAAC,KAAD,CAAMG,GAAG,UAAU3B,MAAO,CAACS,KAAMF,GAAjC,sBAAZkB,UAIb,SAAC,KAAD,MAGP,C","sources":["webpack://react-homework-template/./src/pages/MoviesDetails/MoviesDetails.module.css?e2c8","../node_modules/nanoid/index.browser.js","pages/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"MoviesDetails_box__ehO6e\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import Loading from 'components/Loading/Loading'\nimport React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom'\nimport { getPostsById } from 'shared/API/post'\nimport css from \"pages/MoviesDetails/MoviesDetails.module.css\"\nimport { nanoid } from 'nanoid'\n\nexport default function MoviesDetails() {\n\n  const [state, setState] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  \n  const {id} = useParams()\n\n  const location = useLocation()\n  // console.log(\"location\", location)\n  const cameBack = location.state?.from ?? \"/\"\n \n    useEffect(() => {\n      const fetchPosts = async () => {\n          setLoading(true);\n          try {\n            setError(null)            \n            const data = await getPostsById(id)\n            setState(data)\n          } catch (error) {\n              setError(error)\n          } finally {\n              setLoading(false)\n          }\n        }\n        fetchPosts()\n    }, [id])\n\n  const { title, backdrop_path, overview, release_date, genres, popularity } = state \n  \n  const elements = genres?.map(({name}) => \n    <span key={nanoid()}>{name } </span>)\n  // console.log(elements)\n\n  const URL = \"https://www.themoviedb.org/t/p/w600_and_h900_bestv2\"\n  let res = URL + backdrop_path\n  \n  const castId = nanoid()\n  const reviewsId = nanoid()\n\n  return (\n    <>\n      {loading && <Loading />}\n      {error && <p>Something went wrong</p>}\n      <div>\n        <Link to={cameBack}>Go back</Link>\n      </div>\n      \n      {state &&\n        <div>\n          <div className={css.box}>\n            <div>\n              <img src={res} alt=\"\" width={400}/>\n            </div>\n            <div>\n              <h2>{title} <span>({release_date?.slice(0, 4)})</span></h2>\n              <p> User Score: {Math.round(popularity)}%</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <p>{elements}</p>\n            </div>\n          </div>\n          <h3>Additional information\n            <li key={castId} ><Link to=\"cast\" state={{from: cameBack}}>Cast</Link></li>\n            <li key={reviewsId} ><Link to=\"revievs\" state={{from: cameBack}}>Reviews</Link></li>\n          </h3>\n        </div>\n      }\n        <Outlet/>\n  </>\n  )\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","MoviesDetails","useState","state","setState","loading","setLoading","error","setError","useParams","cameBack","useLocation","from","useEffect","fetchPosts","getPostsById","data","title","backdrop_path","overview","release_date","genres","popularity","elements","map","name","res","castId","reviewsId","Loading","to","className","css","src","alt","width","slice","Math","round"],"sourceRoot":""}